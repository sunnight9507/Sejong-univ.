#include <stdio.h>
#include <stdlib.h>

typedef struct Node{
	struct Node *lChild;
	struct Node *rChild;
	struct Node *parent;
	int key;
}Node;

Node* newnode(){
	Node *temp;

	temp = (Node*)malloc(sizeof(Node));

	temp->key = 0;
	temp->lChild = NULL;
	temp->rChild = NULL;
	temp->parent = NULL;

	return temp;
}

int isExternal(Node *w){
	if(w->lChild == NULL &&  w->rChild == NULL)
		return 1;
	else
		return 0;
}

int isInternal(Node *w){
	if(w->lChild != NULL || w->rChild != NULL)
		return 1;
	else
		return 0;
}

int isRoot(Node *w){
	if(w->parent == NULL)
		return 1;
	else return 0;
}

Node* treeSearch(Node *w,int k){
	if(isExternal(w))
		return w;
	if(k == w->key)
		return w;
	else if(k < w->key)
		return treeSearch(w->lChild,k);
	else if(k > w->key)
		return treeSearch(w->rChild,k);
}

int findElement(Node *w,int k){
	Node *w1;

	w1 = treeSearch(w,k);
	if(isExternal(w1))
		return 0;
	else
		return w1->key;

}

void insertItem(Node * w,int k){
	Node *w1;

	w = treeSearch(w,k);

	if(isInternal(w))
		return;
	else{
		w->key = k;
		w->lChild = newnode();
		w->lChild->parent = w;
		w->rChild = newnode();
		w->rChild->parent = w;
	}

}

void Print(Node* w)
{
	if(w == NULL || w->key == 0)
		return;

	printf(" %d", w->key);

	Print(w->lChild);

	Print(w->rChild);
}

Node* reduceExternal(Node *z){
	Node *w=newnode();
	Node *zs=newnode();
	Node *g = newnode();

	w = z->parent;
	if(w->lChild == z){
		zs = w->rChild;
		
	}
	else{
		zs = w->lChild;
	}

	if(isRoot(w)){
		zs->parent = NULL;
	}
	else{
		g = w->parent;
		zs->parent = g;
		if (w == g->lChild)
			g->lChild = zs;
		else
			g->rChild = zs;
	}
	free(z);
	free(w);

	return zs;
}

Node* inOrderSucc(Node *w){
	Node *w1=newnode();

	w1 = w->rChild;
	if (isExternal(w1))
		return NULL;
	while (isInternal(w1->lChild))
		w1 = w1->lChild;
	return w1;
}

int removeElement(Node *w,int k){
	int e;
	Node *y=newnode();
	Node *z=newnode();

	w = treeSearch(w,k);

	if (isExternal(w)){
		return 0;
	}

	e = w->key;

	z = w->lChild;

	if (!isExternal(z))
		z = w->rChild;

	if (isExternal(z))
		w = reduceExternal(z);
	else{
		y = inOrderSucc(w);
		z = y->lChild;
		w->key = y->key;
		w = reduceExternal(z);
	}

	return e;
}

void putnode(Node *w){
        if (w == NULL)
               return;
		putnode(w->lChild);

		putnode(w->rChild);

        free(w);
}

int main(){
	Node *w;
	char a;
	int k,find,e;

	w = newnode();

	while(1){
		scanf("%c",&a);
		getchar();
		switch(a){
			case 'i':
				scanf("%d",&k);
				getchar();
				insertItem(w,k);
				break;
			case 'd':
				scanf("%d",&k);
				e = removeElement(w,k);
				if(e==0)
					printf("X\n");
				else
					printf("%d\n",e);
				getchar();
				break;
			case 's':
				scanf("%d",&k);
				getchar();
				find = findElement(w,k);
				if(find == 0) 
					printf("X\n");
				else 
					printf("%d\n",find);
				break;
			case 'p':
				Print(w);
				printf("\n");
				break;
			case 'q':
				putnode(w);
				return;
		}
	}



}