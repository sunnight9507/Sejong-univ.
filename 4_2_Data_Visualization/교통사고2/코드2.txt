-------------------------------------첫번째 시각화
<!DOCTYPE html>
<meta charset="utf-8">
<style>

path {
  stroke-linejoin: round;
}

.land {
  fill: #DDDDDD;
}

.states {
  fill: none;
  stroke: white;
}

svg .municipality-label {
  fill: lightblack;
  font-size: 11px;
  font-weight: 1000;
  text-anchor: middle;
}

</style>
<body>
<script src="https://d3js.org/d3.v3.min.js"></script>
<script src="https://d3js.org/queue.v1.min.js"></script>
<script src="https://d3js.org/topojson.v1.min.js"></script>
<script>
var color = d3.scale.category20();
var width = 960,
    height = 550;
var centered;
var projection = d3.geo.mercator()
    .center([126.9895, 37.5651])
    .scale(90000)
    .translate([width/2, height/2]);

var path = d3.geo.path().projection(projection);

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);

var g = svg.append("g");

svg.append("rect")
    .attr("class", "background")
    .attr("width", width)
    .attr("height", height)
    .style("fill", "none")

queue()
    .defer(d3.json, "topo.json")
    .defer(d3.csv, "result_1.csv")
    .await(ready);

function ready(error, kor, stations) {
  if (error) throw error;
  var features = topojson.feature(kor, kor.objects.seoul_municipalities_geo).features;
  g.selectAll("path")
        .data(features)
      .enter().append("path")
        .attr("class", "land")
        .attr("d", path)
        .attr("id", function(d) { return d.properties.name; })
        .append("title");

  g.append("path")
      .datum(topojson.mesh(kor, kor.objects.seoul_municipalities_geo, function(a, b) { return a !== b; }))
      .attr("class", "states")
      .attr("d", path);

  g.selectAll('text')
      .data(features)
      .enter().append("text")
        .attr("transform", function(d) { return "translate(" + path.centroid(d) + ")"; })
        .attr("dy", "2em")
        .attr("class", "municipality-label")
        .style("visibility", "visible")
        .text(function(d) { return [d.properties.name]; })


  g.selectAll("circle")
      .data(stations)
    .enter().append("circle")
      .attr("cx", function(d) { return projection([d.lon, d.lat])[0]; })
      .attr("cy", function(d) { return projection([d.lon, d.lat])[1]; })
      .attr("r", function(d){return (d.name*d.name) / 1000; })
      .attr("fill", function(d){ return color(d.name);});

}

</script>
-------------------------------------두번째 시각화
<!DOCTYPE html>
<meta charset="utf-8">
<style>

path {
  stroke-linejoin: round;
}

.land {
  fill: #DDDDDD;
}

.states {
  fill: none;
  stroke: white;
}

svg .municipality-label {
  fill: lightblack;
  font-size: 11px;
  font-weight: 1000;
  text-anchor: middle;
}

</style>
<body>
<script src="https://d3js.org/d3.v3.min.js"></script>
<script src="https://d3js.org/queue.v1.min.js"></script>
<script src="https://d3js.org/topojson.v1.min.js"></script>
<script>
var color = d3.scale.category20();
var width = 960,
    height = 550;
var centered;
var projection = d3.geo.mercator()
    .center([126.9895, 37.5651])
    .scale(90000)
    .translate([width/2, height/2]);

var path = d3.geo.path().projection(projection);

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);

var g = svg.append("g");

svg.append("rect")
    .attr("class", "background")
    .attr("width", width)
    .attr("height", height)
    .style("fill", "none")

queue()
    .defer(d3.json, "topo.json")
    .defer(d3.csv, "result_2.csv")
    .await(ready);

function ready(error, kor, stations) {
  if (error) throw error;
  var features = topojson.feature(kor, kor.objects.seoul_municipalities_geo).features;
  g.selectAll("path")
        .data(features)
      .enter().append("path")
        .attr("class", "land")
        .attr("d", path)
        .attr("id", function(d) { return d.properties.name; })
        .append("title");

  g.append("path")
      .datum(topojson.mesh(kor, kor.objects.seoul_municipalities_geo, function(a, b) { return a !== b; }))
      .attr("class", "states")
      .attr("d", path);

  g.selectAll('text')
      .data(features)
      .enter().append("text")
        .attr("transform", function(d) { return "translate(" + path.centroid(d) + ")"; })
        .attr("dy", "2em")
        .attr("class", "municipality-label")
        .style("visibility", "visible")
        .text(function(d) { return [d.properties.name]; })


  g.selectAll("circle")
      .data(stations)
    .enter().append("circle")
      .attr("cx", function(d) { return projection([d.lon, d.lat])[0]; })
      .attr("cy", function(d) { return projection([d.lon, d.lat])[1]; })
      .attr("r", 5)
      ;

}

</script>